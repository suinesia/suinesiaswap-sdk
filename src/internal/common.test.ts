import { expect } from "chai";
import { PoolInfo, PoolType, FeeDirection, ValuePerToken, SwapType } from "./common";
import { bigintPow } from "./utils";


interface StablePoolInfoDataType {
    x_decimal: number;
    y_decimal: number;
    amp: number;
    data: [
        { tag: number, index: number, x_prev: string, x: string, y_prev: string, y: string, lsp_prev: string, lsp: string, pn: string, pd: string; }
    ]
}

describe('PoolInfo', () => { // the tests container
    it('checking swapXToYAmount and swapYToXAmount', () => {
        // The data is generated by the amm simulation backtesting in "aptoswap" written in (pool_test.move);
        // The original genearted python script for this is "suiwap/develop/scripts/amm_simulation.py"
        const poolInfoData = require("../../data/tests/pool_data_2.json") as Array<any>;
        const stableInfoData = require("../../data/tests/stablepool_data_2.json") as Array<any>;
        const zero = BigInt(0);

        for (const [poolType, infos] of [["v2", poolInfoData], ["stable", stableInfoData]]) {
            for (const info of infos) {
                const feeDirection = info[0] as FeeDirection;
                const direction = info[1] as ("x-to-y" | "y-to-x");
                const X = BigInt(info[2]);
                const Y = BigInt(info[3]);
                const adminFee = BigInt(info[4]);
                const lpFee = BigInt(info[5]);
                const thFee = BigInt(info[6]);
                const x = BigInt(info[7]);
                const y = BigInt(info[8]);
                const stableAmp =  (poolType == "v2") ? zero : BigInt(info[9]);
                const stableXScale = (poolType == "v2") ? zero : BigInt(info[10]);
                const stableYScale = (poolType == "v2") ? zero : BigInt(info[11]);
    
                const pool = new PoolInfo({
                    addr: "",
                    typeString: "",
                    index: 0,
                    type: {} as PoolType,
                    swapType: poolType as SwapType,
                    lspSupply: BigInt(0),
                    freeze: false,
                    boostMultiplierData: [],
                    feeDirection: feeDirection,
                    adminFee, 
                    lpFee, 
                    thFee,
                    withdrawFee: zero,
                    x: X, 
                    y: Y, 
                    xAdmin: zero,
                    yAdmin: zero,
                    xTh: zero,
                    yTh: zero,
                    stableAmp,
                    stableXScale, 
                    stableYScale, 
                    totalTradeX: zero,
                    totalTradeY: zero,
                    totalTradeXLastEpoch: zero,
                    totalTradeYLastEpoch: zero,
                    totalTradeXCurrentEpoch: zero,
                    totalTradeYCurrentEpoch: zero,
                    thRewardType: "Balance",
                    thRewardX: zero,
                    thRewardY: zero,
                    thRewardXSupply: zero,
                    thRewardYSupply: zero,
                    thRewardNepoch: zero,
                    thRewardStartEpcoh: zero,
                    thRewardEndEpoch: zero,
                    thRewardTotalStakeAmount: zero,
                    thRewardTotalStakeBoost: zero,
                    miningSpeed: zero,
                    miningAmpt: new ValuePerToken(zero, zero),
                    miningLastEpoch: zero,
                });
    
                try {
                    let inAmount = BigInt(0)
                    let outAmount = BigInt(0);
                    let outAmountExpected = BigInt(0);
                    if (direction == "x-to-y") {
                        inAmount = BigInt(x);
                        outAmount = pool.getXToYAmount(inAmount);
                        outAmountExpected = BigInt(y);
                        expect(outAmount).equals(outAmountExpected)
                    }
                    else if (direction == "y-to-x") {
                        inAmount = BigInt(y);
                        outAmount = pool.getYToXAmount(inAmount);
                        outAmountExpected = BigInt(x);
                        expect(outAmount).equals(outAmountExpected)
                    }
                } catch (e) {
                    console.log({ info, pool });
                    throw e;
                }
            }
        }
    }),

    it('checking swapXToYAmount and swapYToXAmount [stable]', () => {
        // { "tag": 1, "index": 2, "x_prev": "9955414196461476", "x": "9965309718209943", "y_prev": "1549963930764", "y": "1551504570006", "lsp_prev": "127243862962632", "lsp": "127370341317848", "pn": "1729974528723376726542642700940000", "pd": "1725660377778971886171539949523007"},
        const poolInfoData = require("../../data/tests/stablepool_data_1.json") as StablePoolInfoDataType;
        const zero = BigInt(0);

        const xd = poolInfoData.x_decimal;
        const yd = poolInfoData.y_decimal;
        const md = Math.max(xd, yd);

        const pool = new PoolInfo({
            addr: "",
            typeString: "",
            index: 0,
            type: {} as PoolType,
            swapType: "stable",
            lspSupply: BigInt(0),
            freeze: false,
            boostMultiplierData: [],
            feeDirection: "Y",
            adminFee: zero,
            lpFee: zero, 
            thFee: zero,
            withdrawFee: zero,
            x: BigInt(poolInfoData.data[0].x),
            y: BigInt(poolInfoData.data[0].y),
            xAdmin: zero,
            yAdmin: zero,
            xTh: zero,
            yTh: zero,
            stableAmp: BigInt(poolInfoData.amp),
            stableXScale: bigintPow(BigInt(10), md - xd),
            stableYScale: bigintPow(BigInt(10), md - yd),
            totalTradeX: zero,
            totalTradeY: zero,
            totalTradeXLastEpoch: zero,
            totalTradeYLastEpoch: zero,
            totalTradeXCurrentEpoch: zero,
            totalTradeYCurrentEpoch: zero,
            thRewardType: "Balance",
            thRewardX: zero,
            thRewardY: zero,
            thRewardXSupply: zero,
            thRewardYSupply: zero,
            thRewardNepoch: zero,
            thRewardStartEpcoh: zero,
            thRewardEndEpoch: zero,
            thRewardTotalStakeAmount: zero,
            thRewardTotalStakeBoost: zero,
            miningSpeed: zero,
            miningAmpt: new ValuePerToken(zero, zero),
            miningLastEpoch: zero,
        }); 
        
        for (const info of poolInfoData.data.slice(1)) {
            if (info.tag != 0) {
                continue;
            }

            const xPrev = BigInt(info.x_prev);
            const yPrev = BigInt(info.y_prev);
            const x = BigInt(info.x);
            const y = BigInt(info.y);

            try {
                pool.x = xPrev;
                pool.y = yPrev;

                let outAmount = BigInt(0);
                let outAmountExpected = BigInt(0);

                if (x >= xPrev) {
                    let inAmount = x - xPrev;
                    outAmount = pool.getXToYAmount(inAmount);
                    outAmountExpected = yPrev - y;
                    expect(outAmount).equals(outAmountExpected)
                }
                else if (y > yPrev) {
                    const inAmount = y - yPrev;
                    outAmount = pool.getYToXAmount(inAmount);
                    outAmountExpected = xPrev - x;
                    expect(outAmount).equals(outAmountExpected)
                }
            } catch (e) {
                // debugLog({ info: info, pool: pool });
                throw e;
            }

            pool.x = x;
            pool.y = y;

            const [pn, pd] = pool._getPriceStableRational(poolInfoData.x_decimal, poolInfoData.y_decimal);
            expect(pn * BigInt(info.pd)).equals(pd * BigInt(info.pn));
        }
    });
});

describe('ValuePerToken', () => {
    it('Check Diff', () => {
        const check = (s1: string, a1: string, s2: string, a2: string, mul: string, res: string) => {
            const v1 = new ValuePerToken(BigInt(s1), BigInt(a1));
            const v2 = new ValuePerToken(BigInt(s2), BigInt(a2));
            expect(ValuePerToken.diff(v1, v2, BigInt(mul))).equals(BigInt(res));
        }
        
        check("3236873322325895","268","132052911642061851403580966937814523385","9356","95462920604836176","0");
        check("62316695348335839","47783643089183227","2067103332941597","875","18919975294674666","0");
        check("43846085650777443","252142859853292","2313039551856423","812935311601535","88745730100846601","15179826566507900835");
        check("81399068369506077142658430468797345927","7","42083962420835132388528804117222500320","3","87609922828042362","0");
        check("203285236829130027037946045356944114509","9","153989170894515482691722426835354321751","4","55550899822376071","0");
        check("34848710189246893411307172750865302982","77824384589739987","252119022842919266186879110135564679486","9775","54980245956756116","0");
        check("5701038081284524","1309615830497347","8856950188457661","8","59273640891772376","0");
        check("18087010701522102","1","1337700883641571","6504","63975942837511306","1157120404581629582493988833859981");
        check("303355243795684118808984251940290317477","6912","26201737250762906017051911361424027011","11393368435837495","33326370889989824","1462634456909392886761538457261312027382748952309820");
        check("97104773947581880","62042675556464157","160073253876031158500670194602704039935","1","64354157704743948","0");
        check("16121891541377058784519052900909973111","2729","16169706923935227","2468022877941643","3936056437113680","23252720769470780763414202331401347885642800049561");
        check("51396616584655026340147139479939601507","56146452975531678","294549642394293299483582290834627067220","80588073503682191","11952524429277361","0");
        check("19504509828777563","7025445047022821","150646711768904456343689428412639948873","4388752971375719670","46902108517436262","0");
        check("13305672796680935304080371988070291071","5742751026673137","20924812766539733","10408810282734405","25355735461358668","58747996909677049099860360378987139524");
        check("38016372702880307","15822942433002667","147441804209680249089850784880578439681","5995395828026474570","4897249507933218","0");
        check("23038110001740831","10292480341568131","24932777287622502","2927","18072440932244963","0");
        check("68589312311484820","43323558530229717","29598598651907449751385545123546603695","789","46404498181047553","0");
        check("42984933084218209","10490125383658300","278598653367351724041013419427907270019","17285615268090546713","2215803159518798","0");
        check("41173587492516843","3938","213093510443213768458828823973548192277","12698528487869182072","80250678894431466","0");
        check("80190141259777043","34608760342511426","74956667627435698257345843188976307539","301","53083031390798729","0");
        check("36245381091831640","9","56152645164928707375230256419815986649","35931655907946316","35289688687098682","0");
        check("30833793276305116","4845","40471746421392309","111433136388169","35545471649589478","226212946272375200502605640093");
        check("92175250273102525572553372601678343998","28249373214837447","129394880518668906265398178552804836425","80517617762356693","65566594105881148","108570083954879354123708212382088172511");
        check("174269756125482451789160187987183692814","74926633493137687","100682842916851099980905218228064004961","6141129815077643639","68772324120073253","158828109228111223961935708402630489881");
        check("5324722616226686","3234946662964227","27482289938592761","5","39174002273651837","0");
        check("92053937993280105358692446907423993983","3","7174785223224425","7062253178371859","64328600319672592","1973900328340546515898770934058406457619121701789036864");
        check("324816310923852452484845840995057361703","36581229806451185","15913655803704212","15424940904179519","45292945951063057","402170394285193395388648441922940483982");
        check("73834819502013818861659442815150277355","7","14819845204195049","7187","53235153831987173","561515424906673171665781495056594042381276070929045655");
        check("3585111714025019","202885221860462","207823028324917116115438520896957265013","33697354751543972","28520645466474900","0");
        check("12165252337889443694056920849066641208","1","94039394324132189","84592825999465954","72504787901263521","882039040524024300485811944474423228358971842249918018");
        check("237084637579898300611165517519677560353","3814","48118799533091308","27014696799243787","44927561097879998","2792772559056008685541595850415878767794689429042858");
        check("53204048158686483439445543769774428604","1","99924732984268234176463181951093596873","16424267789025179524","78692146331436143","4186740743128132436265970342773517431612935081310482707");
        check("40948737627633468","1999","90259153402932700362999292327950511469","7","68256560015972380","0");
        check("6185758694820116194894777675574600647","1","330216055055464452224714671452309708099","7093","24622015250604937","151159562001549419398663311114954639082932628440023918");
        check("45253153339509303","30856281048086419","82567576261436193","4","62196328222069631","0");
        check("8793875280971351","3381057708726903","93483555854336440076602665775971685512","52307626603108735","82766475273755804","0");
        check("23602769479393241","2","117452634428276527560676347504657344518","15174463053931263871","98802315682195826","0");
        check("13726892758169956","5","36092959080213784922911220375223022247","578","137022660308631","0");
        check("63247398227907277","48269504398682785","15420976333374206","1999919828815635","26831840102832019","0");
        check("22718698728649426587570244959777715251","219582392445904640","194592255639998036683473393149669224293","9621735641278816714","77266338667024808","6431570569369229771911893600997522943");
        check("10170663045554898777958933195242850023","3247488648918844","178577558962273943986187107904606859989","6","82549591642922670","0");
        check("172878672404428583835972864873136475516","1593809076888231","23788376163289492","1","3175610612612959","344454824823367940572395086644022111247");
        check("50743796790980372","24025275229042375","39961105590265135","36766670230376519","18926101143226979","19403351942977882");
        check("55879145082180016","7785433847139217","16647625264570061","13040593105641856","45103695233184961","266147709504729618");
        check("82166667737768701","27427371021767158","13577396977557199","9143462685804687","4621607260464527","6982608135416429");
        check("8826894207775650","1919","9823704543530737","3674359281640081","99644835542732012","458339980034594672222205685303");
        check("285426161517254451349356900879816474369","14049932639030256571","15433141825773849046650356823255219509","1609596874738128157","27475841761532059","294731253693095068381629818075345837");
        check("35240814771901210151202410432989660108","2830696981063762003","318553722615724051696585330941397203622","75186525248251675","19563147354338552","0");
        check("337378762690052483931513212041119464875","12508013618052795164","50336177532636554","1859764570304897","463524930554484","12502662079033581918050221903154668");
        check("67549130934444601","5","98032916351194261","8652","93432879308979302","1261203302919518952067486810834671");
        check("191606832932329157665747995758081327334","98745072038609759","49832594743994295008989009768961547107","90498279444538712","38685127724039303","53763519614175370491882412980406847918");
        check("133662981989413170127029888352861801321","8","94096884709188233","2858","67902702374902506","1134509710571134569159357214862410500796411560895669896");
        check("885400780567401","544983535075237","85431267994859892881558491929660258811","58540397314886038","39420216752317874","0");
        check("66398134592951143","6","74434997719883249","9728","49180294154317434","543870322646929228920923659584780");
        check("75741037467567496","5","13511445011338307119916720719705225505","1","15778504002836453","0");
        check("6573410099049941","5215502510842878","705104466657574277249199208185217982","1","39842263994953870","0");
        check("8497412817781399605469099704863638024","2194033944757545749","57584715087484923","9859","19957209151489594","77293420872143345663591158026731275");
        check("60528332507190681014395287187000095236","5833437610965416185","25672813297978868946638244217198418969","3627951222538170053","2313839759363056","7634990480319269280854352883085251");
        check("16158803855420334051986884869853235245","2427","16518523281727489","9","87000145042138746","579241153328817399839774610970439673143165080586344");
        check("52605884641430300657709875820896974957","954936349409677533","48026579976243169417471263423255812831","3033908929268031559","78468055766928855","3080532908062565822245093352064652344");
        check("47676472846634789","7716403806180716","74954123737424425","29817373387088862","21817539801867748","79957215612029393");
        check("51154227048396182433783783731412496607","13371814648468407556","101790638547706326321298711595311932467","12086564445932036453","67979390942680815","0");
        check("37712408118734","9796170161373","81717243737109161","41434069703330656","87701322998229885","164657999957437259");
        check("45760596552955800","2191","138881518764030394842791168282742437025","8","22454698588119144","0");
        check("326828813633514618475864772033866248668","2397","76277487737967041","66878778579549060","20436712697298597","2786527561713427205425674985069905137929488617676241");
        check("69829828494076205","2291021627871209","133577040991006545400024959011599360847","41185613752893957","40117725786983074","0");
        check("308998156247936234753254404898612064111","2","40040220141565121","7005583802895715","45861421395392070","7085547327042902334114386235127454288414843259977755958");
    })
})